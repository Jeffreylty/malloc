/*
 * mm_realloc - Naive implementation of realloc
 */
void *mm_realloc(void *ptr, size_t size)
{
    size_t asize = size;    /* Size of new block */
    void *newptr = ptr;        /* Ptr to the result block */
    
    // If size == 0 then this is just free, and we return NULL
    if (size == 0) {
        mm_free(ptr);
        return NULL;
     }
     
    // If oldptr is NULL, then this is just malloc
    if(ptr == NULL) {
        return mm_malloc(size);
    }

    // Adjust block size to include overhead and alignment reqs
    if (asize <= DSIZE) {
        asize = 2 * DSIZE;
    }else {
        asize = ALIGN(size + DSIZE);
    }
    
    // Return the original ptr if size is less than the original
    if (GET_SIZE(HDRP(ptr)) >= size) {
        return ptr;
    // When next block is free or is end
    }else if(!GET_ALLOC(HDRP(NEXT_BLKP(ptr))) || !GET_SIZE(HDRP(NEXT_BLKP(ptr)))) {
        // Need extend the block
        int diff = GET_SIZE(HDRP(ptr)) + GET_SIZE(HDRP(NEXT_BLKP(ptr))) - size;
        if(diff < 0) {
            if (extend_heap(MAX(-diff, 1<<12)) == NULL)   return NULL;
            diff += MAX(-remainder, 1<<12);
        }
        
        delete_node(NEXT_BLKP(ptr));
        PUT(HDRP(ptr), PACK(asize + diff, 1));
        PUT(FTRP(ptr), PACK(asize + diff, 1));
    // Use new free block
    }else {
        newptr = mm_malloc(asize);
        memcpy(new_block, ptr, GET_SIZE(HDRP(ptr)));
        mm_free(ptr);
    }

    return newptr;
}
